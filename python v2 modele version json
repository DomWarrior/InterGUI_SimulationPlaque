import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from mpl_toolkits.mplot3d import Axes3D
import json

#charge les paramètres à partir du fichier JSON
with open('simulation_parametres.json', 'r') as f:
    params = json.load(f)

TempsTotal = params['TempsTotal']  #temps de simulation

#paramètres à confirmer plaque dimension
Lx, Ly = params['Lx'], params['Ly']  #dimensions plaque en m
Nx, Ny = params['Nx'], params['Ny'] #nb elements

#propriétés physiques et matériau aluminium
k = params['k']  #conductivité thermique en W/m·K
rho = params['rho']  #densité en kg/m^3
cp = params['cp']  #chaleur spécifique en J/kg·K
alpha = k / (rho * cp)  #diffusivité thermique m^2/s
h_conv = params['h_conv']  # coeff de convection en W/m^2·K
Temp_ambiante = params['Temp_ambiante']  #température ambiante en K

#discrétisation
dx, dy = Lx / Nx, Ly / Ny
epaisseur = params['epaisseur']  #epaisseur plaque en m
volume = dx * dy * epaisseur
dt = min(dx**2, dy**2) / (4 * alpha)
Nt = int(TempsTotal / dt)

#C.I.
Temp_init = params['Temp_init']  # 298 K = 25°C
T = np.full((Nx, Ny), Temp_init)
Temp_nouvelle = np.zeros_like(T)

#sources de chaleur
actuateurs = params['actuateurs']
perturbations = params['perturbations']


#temp.
temperature_points = {name: [] for name in params['points_suivi']}

#construction grilles
x = np.linspace(0, Lx * 1e3, Nx)
y = np.linspace(0, Ly * 1e3, Ny)
X, Y = np.meshgrid(x, y)

#fc de température
def update_temp():
    global T, Temp_nouvelle
    T_new = T.copy()
    
    #conduction
    T_new[1:-1,1:-1] += alpha * dt * (
        (T[2:,1:-1] - 2 * T[1:-1,1:-1] + T[:-2,1:-1]) / dx**2 +
        (T[1:-1,2:] - 2 * T[1:-1,1:-1] + T[1:-1,:-2]) / dy**2
    )

    #C.L. convection
    T_new[0, :] += dt / (rho * cp) * h_conv * (Temp_ambiante - T[0, :]) / epaisseur
    T_new[-1, :] += dt / (rho * cp) * h_conv * (Temp_ambiante - T[-1, :]) / epaisseur
    T_new[:, 0] += dt / (rho * cp) * h_conv * (Temp_ambiante - T[:, 0]) / epaisseur
    T_new[:, -1] += dt / (rho * cp) * h_conv * (Temp_ambiante - T[:, -1]) / epaisseur

    #actuateurs
    for act in actuateurs:
        x_idx, y_idx = act['position']
        P = act['puissance']
        T_new[x_idx, y_idx] += (P * dt) / (rho * cp * volume)

    #perturbations
    for pert in perturbations:
        x_idx, y_idx = pert['position']
        P = pert['puissance']
        T_new[x_idx, y_idx] += (P * dt) / (rho * cp * volume)


    T[:, :] = T_new[:, :]

#creation affichage animation
fig = plt.figure(figsize=(14, 6))
ax2 = fig.add_subplot(121, projection='3d')  
ax1 = fig.add_subplot(122)
cmap = plt.get_cmap('PuRd')  #laisser rose pls merci :)))))

im = ax1.imshow(T, cmap=cmap, interpolation='nearest', origin='lower', animated=True)
plt.colorbar(im, ax=ax1, label='Température (K)')
ax1.set_title("Évolution 2D de la température")
ax1.set_xlabel("x")
ax1.set_ylabel("y")

#mise a jour animation
def update(frame):
    update_temp()

    for name, pos in params['points_suivi'].items():
        temperature_points[name].append(T[pos[0], pos[1]])

    ax1.clear()
    im = ax1.imshow(T, cmap=cmap, interpolation='nearest', origin='lower', animated=True)
    ax1.set_title("Évolution 2D de la température")
    ax1.set_xlabel("x")
    ax1.set_ylabel("y")

    ax2.clear()
    ax2.plot_surface(X, Y, T.T, cmap=cmap)
    ax2.set_xlabel("X position [mm]")
    ax2.set_ylabel("Y position [mm]")
    ax2.set_zlabel("Température (K)")
    ax2.set_title(f"Distribution 3D de la température à t = {frame * dt:.2f} s")

    return [im]

#animation affichage
anim = FuncAnimation(
    fig,
    func=update,
    frames=Nt // 100,
    blit=False,
    interval=50
)

plt.show()

#Affichage comme l'exemple pw présentation projet, bon exemple visuel, à peut-être placer avec le graph 3D
fig2, ax2 = plt.subplots()
time_vector = np.arange(len(next(iter(temperature_points.values())))) * dt

rose_colors = ['orchid', 'deeppink', 'lightpink']

for (name, temps), color in zip(temperature_points.items(), rose_colors):
    ax2.plot(time_vector, np.array(temps) - 273, label=name, color=color)

ax2.set_xlabel("Temps (s)")
ax2.set_ylabel("Température (°C)")
ax2.legend()
ax2.grid(True)

plt.show()
