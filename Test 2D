import matplotlib.pyplot as plt
import numpy as np
from matplotlib.animation import FuncAnimation

temps_simulation = 500 #s



#Thermal proprieties and conditons of the simulation

k = 205 # thermal conductivity [W/mk]
p = 2700 #density [kg/m^3]
cp = 900 #calorific capacity [j/kgK]
h = 15 # convection coefficient [w/m^2K]

T_air = 273.15+25 #K


#Dimension of plate

Lx = 120e-3 # m
Ly = 120e-3 # m
e =  1.5e-3 # m 



n_x = 120
n_y = 120

dx = Lx/n_x
dy = Ly/n_y
dz = e

vol = dx*dy*e


a = k/(cp*p)

dt = min((dx**2)/(8*a),(dy**2)/(8*a))

print(dt)
print(dx, dy)


#Matrice de température 
T = np.ones((n_x,n_y))*(10+273.15)
print(T)

#nx10 = 10
#ny10 = 10
#Temp2 = np.ones((nx10,ny10))*10
#print(Temp2)

#Temp2[0][2] = 3
#print(Temp2)




#Matrice de temps
Nt = int(temps_simulation/dt)

print(Nt)


def vector_evolution_temperature(T, pos_ac, nx_ac, ny_ac, P_ac = None,
                                P_pert = None , pos_pert = None , nx_pert = None, ny_pert = None):
    T_new = T.copy()
    vol = dx*dy*dz



    #conductions éléments centraux
    T_new[1:-1,1:-1] = T[1:-1, 1:-1] + a*dt*((T[2:,1:-1]-2*T[1:-1, 1:-1] +T[0:-2, 1:-1])/(dx**2) +
                                            (T[1:-1,2:]-2*T[1:-1, 1:-1] +T[1:-1, 0:-2])/(dy**2))
    
    # conduction éléments sur les bords et coins
    T_new[0, 1:-1] += a * dt * ((T[1, 1:-1] - T[0, 1:-1]) / dx**2 +
                                (T[0, 2:] - 2 * T[0, 1:-1] + T[0, :-2]) / dy**2)  # Bord haut

    T_new[-1, 1:-1] += a * dt * ((T[-2, 1:-1] - T[-1, 1:-1]) / dx**2 +
                                 (T[-1, 2:] - 2 * T[-1, 1:-1] + T[-1, :-2]) / dy**2)  # Bord bas

    T_new[1:-1, 0] += a * dt * ((T[2:, 0] - 2 * T[1:-1, 0] + T[:-2, 0]) / dx**2 +
                                (T[1:-1, 1] - T[1:-1, 0]) / dy**2)  # Bord gauche

    T_new[1:-1, -1] += a * dt * ((T[2:, -1] - 2 * T[1:-1, -1] + T[:-2, -1]) / dx**2 +
                                 (T[1:-1, -2] - T[1:-1, -1]) / dy**2)  # Bord droit

    T_new[0, 0] += a * dt * ((T[1, 0] - T[0, 0]) / dx**2 + (T[0, 1] - T[0, 0]) / dy**2)  # Coin haut-gauche

    T_new[0, -1] += a * dt * ((T[1, -1] - T[0, -1]) / dx**2 + (T[0, -2] - T[0, -1]) / dy**2)  # Coin haut-droit

    T_new[-1, 0] += a * dt * ((T[-2, 0] - T[-1, 0]) / dx**2 + (T[-1, 1] - T[-1, 0]) / dy**2)  # Coin bas-gauche

    T_new[-1, -1] += a * dt * ((T[-2, -1] - T[-1, -1]) / dx**2 + (T[-1, -2] - T[-1, -1]) / dy**2)  # Coin bas-droit
    



    # Convection 
    Coeff = (h*dt)/(p*cp) #m

    #Convection bord haut
    T_new[0, :] += Coeff*(T_air-T_new[0,:])*((dz*dx)/(vol))

    #Convection bord bas
    T_new[-1, :] +=  Coeff*(T_air-T_new[-1,:])*((dz*dx)/(vol))
    
    #Convection bord gauche
    T_new[:,0] += Coeff*(T_air-T_new[:,0])*((dz*dy)/(vol))

    #Convection bord droit 
    T_new[:,-1] += Coeff*(T_air-T_new[:,-1])*((dz*dy)/(vol))

    #Convection dessus/desosus
    T_new[:,:] +=  2*Coeff*(T_air-T_new[:,:])*((dx*dy)/vol)



    # Actuateur
    i, j = pos_ac
    P_par_element = P_ac/(nx_ac*ny_ac)
    T_new[i-nx_ac//2: i+nx_ac//2 , j-ny_ac//2 : j + ny_ac//2 ] += (P_par_element*dt)/(p*cp*vol)

    # Perturbation
    if P_pert is not None :
        i, j = pos_pert
        P_par_element = P_pert/(nx_pert*ny_pert)
        T_new[i-nx_pert//2:i+nx_pert//2, j-ny_pert//2:j+ny_pert//2] += (P_par_element*dt)/(p*cp*vol)

    return T_new